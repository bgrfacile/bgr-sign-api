name: Deploy Spring Boot to VPS

on:
  pull_request:
    branches:
      - main
    types: [opened,synchronize,reopened,ready_for_review]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le code du dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Préparer l'outil de build Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Se connecter au registre Docker privé avec les identifiants
      - name: Login to private Docker registry
        uses: docker/login-action@v2
        with:
          registry: registry.bgrfacile.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # 4. Construire l'image Docker et la pousser sur le registre privé
      - name: Build and push Docker image for Spring Boot app
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: registry.bgrfacile.com/bgr-sign-api:latest
          push: true

      # 5. Configurer l'accès SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 6. (Optionnel) Générer le fichier .env si nécessaire
      - name: Generate .env file
        run: echo "DOMAINE_NAME=${{ secrets.DOMAINE_NAME }}" > .env

      # 7. Générer le fichier prod.properties avec les bonnes valeurs
      - name: Generate prod.properties file
        run: |
          echo "DB_HOST=postgres" > prod.properties
          echo "DB_USER=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> prod.properties
          echo "DB_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> prod.properties
          echo "JWT_SECRET=$(openssl rand -base64 64)" >> prod.properties

      - name: Create configuration directory
        run: mkdir -p configuration

      - name: Move prod.properties to configuration directory
        run: mv prod.properties configuration/

      # 8. Synchroniser les fichiers de configuration et docker-compose vers le VPS
      - name: Sync configuration files to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p /srv/www/bgr-sign-api/configuration"
          rsync -avz --no-perms --no-group -e "ssh -o StrictHostKeyChecking=no" docker-compose-prod.yml .env ./configuration/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/srv/www/bgr-sign-api/

      # 9. Déployer sur le VPS via SSH en utilisant docker-compose
      - name: Deploy on VPS via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Se connecter au registre pour pull l'image
            echo ${{ secrets.REGISTRY_PASSWORD }} | docker login registry.bgrfacile.com -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
            cd /srv/www/bgr-sign-api
            # Redémarrer l'application avec interruption minimale
            docker compose -f docker-compose-prod.yml down || true
            docker compose -f docker-compose-prod.yml up -d
